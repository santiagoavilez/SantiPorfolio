---
export interface Props {
    width: string;
    color?: string;
    title: string;
    gradient?: boolean;
}
const { color = "currentcolor", gradient, width, title } = Astro.props;
---

<dl class="">
    <dt class="text-lg font-medium text-gray-500 dark:text-gray-400">
        {title}
    </dt>
    <dd class="flex items-center mb-5">
        <div class="w-full bg-gray-200 rounded h-2.5 dark:bg-gray-700 mr-2">
            <div
                class="bg-gradient-to-r from-cerulean-700 to-cerulean-500 dark:from-cerulean-600 dark:to-cerulean-400 h-2.5 rounded progress"
                data-width={width}
            >
            </div>
        </div>
        <span class="text-lg font-medium text-gray-500 dark:text-gray-400"
            >{width}
        </span>
    </dd>
</dl>

<script>
    const observer = new IntersectionObserver((entries) => {
        // We will fill in the callback later...
        entries.forEach((entry) => {
            const progressbar = entry.target;
            let animate = false;
            if (entry.isIntersecting && !animate) {
                progressbar.style.width = progressbar.dataset.width;
                progressbar.classList.add("animate-progress");
                
                animate = true;
                return; // if we added the class, exit the function
            }
            // We're not intersecting, so remove the class!
        });
    });
    // Tell the observer which elements to track
    const bar = document.querySelectorAll(".progress").forEach((bar) => {
        if (bar) observer.observe(bar);
    });
</script>